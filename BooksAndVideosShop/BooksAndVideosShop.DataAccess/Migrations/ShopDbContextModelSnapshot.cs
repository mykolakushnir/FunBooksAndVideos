// <auto-generated />
using BooksAndVideosShop.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BooksAndVideosShop.DataAccess.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    partial class ShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("BooksAndVideosShop.Domain.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActiveMembership")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BooksAndVideosShop.Domain.Models.MembershipProduct", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MembershipProducts");
                });

            modelBuilder.Entity("BooksAndVideosShop.Domain.Models.OrderItemLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("PhysicalProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("OrderItemLines");
                });

            modelBuilder.Entity("BooksAndVideosShop.Domain.Models.PhysicalProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PhysicalProducts");
                });

            modelBuilder.Entity("BooksAndVideosShop.Domain.Models.PurchaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("CustomerMembershipId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerMembershipId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("BooksAndVideosShop.Domain.Models.OrderItemLine", b =>
                {
                    b.HasOne("BooksAndVideosShop.Domain.Models.PhysicalProduct", "PhysicalProduct")
                        .WithMany()
                        .HasForeignKey("PhysicalProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__OrderItemLines_PhysicalProductId__PhysicalProducts_Id");

                    b.HasOne("BooksAndVideosShop.Domain.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("OrderItemLines")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__OrderItemLines_PurchaseOrderId__PurchaseOrders_Id");

                    b.Navigation("PhysicalProduct");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("BooksAndVideosShop.Domain.Models.PurchaseOrder", b =>
                {
                    b.HasOne("BooksAndVideosShop.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__PurchaseOrders_CustomerId__Customers_Id");

                    b.HasOne("BooksAndVideosShop.Domain.Models.MembershipProduct", "CustomerMembership")
                        .WithMany()
                        .HasForeignKey("CustomerMembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK__PurchaseOrders_CustomerMembershipId__MembershipProducts_Id");

                    b.Navigation("Customer");

                    b.Navigation("CustomerMembership");
                });

            modelBuilder.Entity("BooksAndVideosShop.Domain.Models.PurchaseOrder", b =>
                {
                    b.Navigation("OrderItemLines");
                });
#pragma warning restore 612, 618
        }
    }
}
